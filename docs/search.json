[{"fullname": "ida_scripts", "modulename": "ida_scripts", "qualname": "", "type": "module", "doc": "<p>To use, load the <code>load.py</code> script in IDA Pro. Supports the latest IDAPython api.</p>\n"}, {"fullname": "ida_scripts.func", "modulename": "ida_scripts.func", "qualname": "", "type": "module", "doc": "<p>Provides class(es) for interacting with functions.</p>\n"}, {"fullname": "ida_scripts.func.CItem", "modulename": "ida_scripts.func", "qualname": "CItem", "type": "class", "doc": "<p>Represent an item inside a graph of a decompiled function.</p>\n"}, {"fullname": "ida_scripts.func.CItem.__init__", "modulename": "ida_scripts.func", "qualname": "CItem.__init__", "type": "function", "doc": "<p>Initialise with a <code>ida_hexrays.citem_t</code> object.</p>\n", "parameters": ["self", "item", "graph"], "funcdef": "def"}, {"fullname": "ida_scripts.func.CItem.id", "modulename": "ida_scripts.func", "qualname": "CItem.id", "type": "variable", "doc": "<p>Item object id.</p>\n"}, {"fullname": "ida_scripts.func.CItem.address", "modulename": "ida_scripts.func", "qualname": "CItem.address", "type": "variable", "doc": "<p>Item address.</p>\n"}, {"fullname": "ida_scripts.func.CItem.op", "modulename": "ida_scripts.func", "qualname": "CItem.op", "type": "variable", "doc": "<p>Name of the operation represented by this item.</p>\n"}, {"fullname": "ida_scripts.func.CItem.op_id", "modulename": "ida_scripts.func", "qualname": "CItem.op_id", "type": "variable", "doc": "<p>The operation represented by this item.</p>\n"}, {"fullname": "ida_scripts.func.CItem.type_name", "modulename": "ida_scripts.func", "qualname": "CItem.type_name", "type": "variable", "doc": "<p>The name of the type associated with this item.</p>\n"}, {"fullname": "ida_scripts.func.CItem.accessed_struct", "modulename": "ida_scripts.func", "qualname": "CItem.accessed_struct", "type": "variable", "doc": "<p>Find and return the <code>StrucT</code> accessed by this memptr/memref operation.</p>\n"}, {"fullname": "ida_scripts.func.CItem.accessed_struct_member", "modulename": "ida_scripts.func", "qualname": "CItem.accessed_struct_member", "type": "variable", "doc": "<p>Find and return the <code>MemberT</code> accessed by this memptr/memref operation.</p>\n"}, {"fullname": "ida_scripts.func.CItem.called_function", "modulename": "ida_scripts.func", "qualname": "CItem.called_function", "type": "variable", "doc": "<p>Find and return the <code>Func</code> called by this call operation.</p>\n"}, {"fullname": "ida_scripts.func.CItem.num_value", "modulename": "ida_scripts.func", "qualname": "CItem.num_value", "type": "variable", "doc": "<p>Return the value corresponding to this num operation.</p>\n"}, {"fullname": "ida_scripts.func.CItem.label", "modulename": "ida_scripts.func", "qualname": "CItem.label", "type": "variable", "doc": "<p>Short label for item.</p>\n"}, {"fullname": "ida_scripts.func.CItem.children", "modulename": "ida_scripts.func", "qualname": "CItem.children", "type": "variable", "doc": "<p>The children of this item.</p>\n"}, {"fullname": "ida_scripts.func.CItem.n_children", "modulename": "ida_scripts.func", "qualname": "CItem.n_children", "type": "variable", "doc": "<p>The number of children of this item.</p>\n"}, {"fullname": "ida_scripts.func.CItem.parent", "modulename": "ida_scripts.func", "qualname": "CItem.parent", "type": "variable", "doc": "<p>The parent of this item.</p>\n"}, {"fullname": "ida_scripts.func.CItem.parent_expression", "modulename": "ida_scripts.func", "qualname": "CItem.parent_expression", "type": "variable", "doc": "<p>Find and return the parent expression.</p>\n"}, {"fullname": "ida_scripts.func.CItem.child_where", "modulename": "ida_scripts.func", "qualname": "CItem.child_where", "type": "function", "doc": "<p>Preorder dfs search for the first child meeting the condition.</p>\n", "parameters": ["self", "condition"], "funcdef": "def"}, {"fullname": "ida_scripts.func.CItem.children_where", "modulename": "ida_scripts.func", "qualname": "CItem.children_where", "type": "function", "doc": "<p>Preorder dfs search for all children meeting the condition.</p>\n", "parameters": ["self", "condition"], "funcdef": "def"}, {"fullname": "ida_scripts.func.CItem.subtree_search_strict", "modulename": "ida_scripts.func", "qualname": "CItem.subtree_search_strict", "type": "function", "doc": "<p>Perform a dfs tree search with the specified query.</p>\n\n<p>The query is a <code>dict</code> representing a subtree to search for, recursively defined as:</p>\n\n<pre><code>&lt;query&gt; = {\n        \"op\" : &lt;str&gt;,\n        \"condition\" : &lt;lambda (CItem) -&gt; bool&gt;,\n        \"children\" : [&lt;query&gt;, ...]\n}\n</code></pre>\n\n<p><code>op</code> the name of the operation for the current item\n<code>condition</code> the matching condition for the current item\n<code>children</code> nested query(ies) specifying the children to match</p>\n\n<p>All fields are optional, but at least one of <code>op, condition</code> must be present.\nThe query does not have to specify the complete subtree, but each of its specified level must be complete.\nie. If node A has children B, C, query can either not specify A's children at all or it must specify A's children as both B and C.</p>\n\n<p>Returns results as a list of <code>List[List[CItem]]</code>, the outermost list representing the unique matches, each inner <code>List[List[CItem]]</code> representing a match.\nExample of a match:</p>\n\n<p>Query: <code>{ op : A, children: [{ op : B}, { op : C }]}</code></p>\n\n<p>A Match: <code>[[A], [B, C]]</code></p>\n\n<p>Returns: <code>[[[A], [B, C]], ...]</code></p>\n", "parameters": ["self", "query"], "funcdef": "def"}, {"fullname": "ida_scripts.func.CFunc", "modulename": "ida_scripts.func", "qualname": "CFunc", "type": "class", "doc": "<p>Represent a decompiled function.</p>\n"}, {"fullname": "ida_scripts.func.CFunc.__init__", "modulename": "ida_scripts.func", "qualname": "CFunc.__init__", "type": "function", "doc": "<p>Initialise with the original <code>Func</code> and the decompiled <code>ida_hexrays.cfunc_t</code> object.</p>\n", "parameters": ["self", "original", "decompiled"], "funcdef": "def"}, {"fullname": "ida_scripts.func.CFunc.original", "modulename": "ida_scripts.func", "qualname": "CFunc.original", "type": "variable", "doc": "<p>The <code>Func</code> object from which this object is derived.</p>\n"}, {"fullname": "ida_scripts.func.CFunc.decompiled", "modulename": "ida_scripts.func", "qualname": "CFunc.decompiled", "type": "variable", "doc": "<p>The decompiled <code>ida_hexrays.cfunc_t</code> object.</p>\n"}, {"fullname": "ida_scripts.func.CFunc.body", "modulename": "ida_scripts.func", "qualname": "CFunc.body", "type": "variable", "doc": "<p>The graph representing the decompiled function.</p>\n"}, {"fullname": "ida_scripts.func.CFunc.body_root", "modulename": "ida_scripts.func", "qualname": "CFunc.body_root", "type": "variable", "doc": "<p>The root node of the graph for this function.</p>\n"}, {"fullname": "ida_scripts.func.CFunc.psuedocode", "modulename": "ida_scripts.func", "qualname": "CFunc.psuedocode", "type": "variable", "doc": "<p>Psuedocode of the decompiled function.</p>\n"}, {"fullname": "ida_scripts.func.Func", "modulename": "ida_scripts.func", "qualname": "Func", "type": "class", "doc": "<p>Represent a function.</p>\n"}, {"fullname": "ida_scripts.func.Func.__init__", "modulename": "ida_scripts.func", "qualname": "Func.__init__", "type": "function", "doc": "<p>Initialise with a <code>ida_funcs.func_t</code> object.</p>\n", "parameters": ["self", "func"], "funcdef": "def"}, {"fullname": "ida_scripts.func.Func.find_func", "modulename": "ida_scripts.func", "qualname": "Func.find_func", "type": "function", "doc": "<p>Find function by name.</p>\n", "parameters": ["name"], "funcdef": "def"}, {"fullname": "ida_scripts.func.Func.func_at", "modulename": "ida_scripts.func", "qualname": "Func.func_at", "type": "function", "doc": "<p></p>\n", "parameters": ["addr"], "funcdef": "def"}, {"fullname": "ida_scripts.func.Func.name", "modulename": "ida_scripts.func", "qualname": "Func.name", "type": "variable", "doc": "<p>Function name.</p>\n"}, {"fullname": "ida_scripts.func.Func.start", "modulename": "ida_scripts.func", "qualname": "Func.start", "type": "variable", "doc": "<p>Function start address.</p>\n"}, {"fullname": "ida_scripts.func.Func.end", "modulename": "ida_scripts.func", "qualname": "Func.end", "type": "variable", "doc": "<p>Function end address.</p>\n"}, {"fullname": "ida_scripts.func.Func.size", "modulename": "ida_scripts.func", "qualname": "Func.size", "type": "variable", "doc": "<p>Function size.</p>\n"}, {"fullname": "ida_scripts.func.Func.decompile", "modulename": "ida_scripts.func", "qualname": "Func.decompile", "type": "function", "doc": "<p>Decompile this function.</p>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "ida_scripts.memory", "modulename": "ida_scripts.memory", "qualname": "", "type": "module", "doc": "<p>Provides class(es) for interacting with the debugged process's memory.</p>\n"}, {"fullname": "ida_scripts.memory.Pointer", "modulename": "ida_scripts.memory", "qualname": "Pointer", "type": "class", "doc": "<p>Represent an address.\nThe <code>Pointer</code> class offers convenient access to read/write from a memory address.</p>\n\n<p>Init a <code>Pointer</code> object with <code>Pointer.__init__</code> or the shorthand <code>ptr</code>.</p>\n\n<p>A <code>Pointer</code> object provides convenient functions to read/write certain data types (integers, string, pointer) to its address in memory.\nThese methods take an optional <code>value</code> parameter. They read and return the value if <code>value</code> is <code>None</code>, write and return success/failure as a <code>bool</code> when <code>value</code> is not None.</p>\n\n<p><code>Pointer</code> can be added/subtracted from another <code>Pointer</code> or <code>int</code> to yield a new <code>Pointer</code>.</p>\n"}, {"fullname": "ida_scripts.memory.Pointer.__init__", "modulename": "ida_scripts.memory", "qualname": "Pointer.__init__", "type": "function", "doc": "<p>Init with an address.</p>\n", "parameters": ["self", "addr"], "funcdef": "def"}, {"fullname": "ida_scripts.memory.Pointer.default_string_encoding", "modulename": "ida_scripts.memory", "qualname": "Pointer.default_string_encoding", "type": "variable", "doc": "<p>The default string encoding used by <code>Pointer.string</code>. Defaults to <code>'utf-8'</code>.</p>\n"}, {"fullname": "ida_scripts.memory.Pointer.read", "modulename": "ida_scripts.memory", "qualname": "Pointer.read", "type": "function", "doc": "<p>Read bytes from <code>self.addr + offset</code> of given size.</p>\n", "parameters": ["self", "size", "offset"], "funcdef": "def"}, {"fullname": "ida_scripts.memory.Pointer.write", "modulename": "ida_scripts.memory", "qualname": "Pointer.write", "type": "function", "doc": "<p>Write bytes to <code>self.addr + offset</code>.</p>\n", "parameters": ["self", "bytes", "offset"], "funcdef": "def"}, {"fullname": "ida_scripts.memory.Pointer.read_write_with_struct", "modulename": "ida_scripts.memory", "qualname": "Pointer.read_write_with_struct", "type": "function", "doc": "<p>Read/Wwrite an integer.</p>\n", "parameters": ["self", "format", "value"], "funcdef": "def"}, {"fullname": "ida_scripts.memory.Pointer.u8", "modulename": "ida_scripts.memory", "qualname": "Pointer.u8", "type": "function", "doc": "<p>Read/Write uint8.</p>\n", "parameters": ["self", "value"], "funcdef": "def"}, {"fullname": "ida_scripts.memory.Pointer.u16", "modulename": "ida_scripts.memory", "qualname": "Pointer.u16", "type": "function", "doc": "<p>Read/Write uint16.</p>\n", "parameters": ["self", "value"], "funcdef": "def"}, {"fullname": "ida_scripts.memory.Pointer.u32", "modulename": "ida_scripts.memory", "qualname": "Pointer.u32", "type": "function", "doc": "<p>Read/Write uint32.</p>\n", "parameters": ["self", "value"], "funcdef": "def"}, {"fullname": "ida_scripts.memory.Pointer.u64", "modulename": "ida_scripts.memory", "qualname": "Pointer.u64", "type": "function", "doc": "<p>Read/Write uint64.</p>\n", "parameters": ["self", "value"], "funcdef": "def"}, {"fullname": "ida_scripts.memory.Pointer.s8", "modulename": "ida_scripts.memory", "qualname": "Pointer.s8", "type": "function", "doc": "<p>Read/Write int8.</p>\n", "parameters": ["self", "value"], "funcdef": "def"}, {"fullname": "ida_scripts.memory.Pointer.s16", "modulename": "ida_scripts.memory", "qualname": "Pointer.s16", "type": "function", "doc": "<p>Read/Write int16.</p>\n", "parameters": ["self", "value"], "funcdef": "def"}, {"fullname": "ida_scripts.memory.Pointer.s32", "modulename": "ida_scripts.memory", "qualname": "Pointer.s32", "type": "function", "doc": "<p>Read/Write int32.</p>\n", "parameters": ["self", "value"], "funcdef": "def"}, {"fullname": "ida_scripts.memory.Pointer.s64", "modulename": "ida_scripts.memory", "qualname": "Pointer.s64", "type": "function", "doc": "<p>Read/Write int64.</p>\n", "parameters": ["self", "value"], "funcdef": "def"}, {"fullname": "ida_scripts.memory.Pointer.string", "modulename": "ida_scripts.memory", "qualname": "Pointer.string", "type": "function", "doc": "<p>Read/Write string, optionally specifying a custom encoding and length to read.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>value</strong> (str, default = None):\nValue to be written, the function reads if it's <code>None</code>.</li>\n<li><strong>encoding</strong> (str, default = None):\nEncoding to be used for reading/writing, specify <code>None</code> to use <code>Pointer.default_string_encoding</code>.</li>\n<li><strong>read_length</strong> (int, defualt = None):\nLength to read, leave None to read until <code>\\0</code>.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong><code>str</code> or <code>bool</code></strong>: Either the read string, or a bool indicating whether write succeeded.</li>\n</ul>\n", "parameters": ["self", "value", "encoding", "read_length"], "funcdef": "def"}, {"fullname": "ida_scripts.memory.Pointer.ptr", "modulename": "ida_scripts.memory", "qualname": "Pointer.ptr", "type": "function", "doc": "<p>Read/Write pointer.</p>\n", "parameters": ["self", "value"], "funcdef": "def"}, {"fullname": "ida_scripts.memory.Pointer.hexdump_str", "modulename": "ida_scripts.memory", "qualname": "Pointer.hexdump_str", "type": "function", "doc": "<p>Generate hexdump from <code>self.addr + offset</code> of specified length.</p>\n", "parameters": ["self", "len", "offset"], "funcdef": "def"}, {"fullname": "ida_scripts.memory.Pointer.hexdump", "modulename": "ida_scripts.memory", "qualname": "Pointer.hexdump", "type": "function", "doc": "<p>Print hexdump from <code>self.addr + offset</code> of specified length.</p>\n", "parameters": ["self", "len", "offset"], "funcdef": "def"}, {"fullname": "ida_scripts.memory.Pointer.add", "modulename": "ida_scripts.memory", "qualname": "Pointer.add", "type": "function", "doc": "<p></p>\n", "parameters": ["self", "other"], "funcdef": "def"}, {"fullname": "ida_scripts.memory.Pointer.sub", "modulename": "ida_scripts.memory", "qualname": "Pointer.sub", "type": "function", "doc": "<p></p>\n", "parameters": ["self", "other"], "funcdef": "def"}, {"fullname": "ida_scripts.memory.ptr", "modulename": "ida_scripts.memory", "qualname": "ptr", "type": "function", "doc": "<p>Initialise a <code>Pointer</code>.</p>\n", "parameters": ["addr"], "funcdef": "def"}, {"fullname": "ida_scripts.misc", "modulename": "ida_scripts.misc", "qualname": "", "type": "module", "doc": "<p>Provides additional helper functions.</p>\n"}, {"fullname": "ida_scripts.misc.find_local_var", "modulename": "ida_scripts.misc", "qualname": "find_local_var", "type": "function", "doc": "<p>Find a local variable by name when paused in a function frame.</p>\n", "parameters": ["var_name"], "funcdef": "def"}, {"fullname": "ida_scripts.misc.find_symbol", "modulename": "ida_scripts.misc", "qualname": "find_symbol", "type": "function", "doc": "<p>Find a global symbol by name.</p>\n", "parameters": ["name"], "funcdef": "def"}, {"fullname": "ida_scripts.module", "modulename": "ida_scripts.module", "qualname": "", "type": "module", "doc": "<p>Provides class(es) for interacing with modules.</p>\n"}, {"fullname": "ida_scripts.module.Module", "modulename": "ida_scripts.module", "qualname": "Module", "type": "class", "doc": "<p>Represents a single module.</p>\n"}, {"fullname": "ida_scripts.module.Module.__init__", "modulename": "ida_scripts.module", "qualname": "Module.__init__", "type": "function", "doc": "<p></p>\n", "parameters": ["self", "addr"], "funcdef": "def"}, {"fullname": "ida_scripts.module.Module.all_modules", "modulename": "ida_scripts.module", "qualname": "Module.all_modules", "type": "function", "doc": "<p>Return a list of all the modules.</p>\n", "parameters": [], "funcdef": "def"}, {"fullname": "ida_scripts.module.Module.find_module", "modulename": "ida_scripts.module", "qualname": "Module.find_module", "type": "function", "doc": "<p></p>\n", "parameters": ["name"], "funcdef": "def"}, {"fullname": "ida_scripts.struc", "modulename": "ida_scripts.struc", "qualname": "", "type": "module", "doc": "<p>Provides class(es) for interacting with structures (definition and instances in memory).</p>\n"}, {"fullname": "ida_scripts.struc.MemberT", "modulename": "ida_scripts.struc", "qualname": "MemberT", "type": "class", "doc": "<p>Represent a member of a struct type.</p>\n"}, {"fullname": "ida_scripts.struc.MemberT.__init__", "modulename": "ida_scripts.struc", "qualname": "MemberT.__init__", "type": "function", "doc": "<p>Init with an <code>ida_struct.member_t</code> object.</p>\n", "parameters": ["self", "member", "struct"], "funcdef": "def"}, {"fullname": "ida_scripts.struc.MemberT.member", "modulename": "ida_scripts.struc", "qualname": "MemberT.member", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "ida_scripts.struc.MemberT.struct", "modulename": "ida_scripts.struc", "qualname": "MemberT.struct", "type": "variable", "doc": "<p>The struct type containing this member.</p>\n"}, {"fullname": "ida_scripts.struc.MemberT.id", "modulename": "ida_scripts.struc", "qualname": "MemberT.id", "type": "variable", "doc": "<p>Member id (mid).</p>\n"}, {"fullname": "ida_scripts.struc.MemberT.name", "modulename": "ida_scripts.struc", "qualname": "MemberT.name", "type": "variable", "doc": "<p>Member name.</p>\n"}, {"fullname": "ida_scripts.struc.MemberT.dtype", "modulename": "ida_scripts.struc", "qualname": "MemberT.dtype", "type": "variable", "doc": "<p>Member type, represented with <code>ida_typeinf.tinfo_t</code>.</p>\n"}, {"fullname": "ida_scripts.struc.MemberT.offset", "modulename": "ida_scripts.struc", "qualname": "MemberT.offset", "type": "variable", "doc": "<p>Member offset in struct.</p>\n"}, {"fullname": "ida_scripts.struc.MemberT.size", "modulename": "ida_scripts.struc", "qualname": "MemberT.size", "type": "variable", "doc": "<p>Member size in bytes.</p>\n"}, {"fullname": "ida_scripts.struc.MemberT.instance_at", "modulename": "ida_scripts.struc", "qualname": "MemberT.instance_at", "type": "function", "doc": "<p>Get the value from the given address.</p>\n\n<p>This method reads and parses the value at the given address using the appropriate type.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>addr</strong> (<code>Pointer</code>):</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong><code>Pointer</code> or <code>int</code></strong>: The parsed value.</li>\n</ul>\n", "parameters": ["self", "addr"], "funcdef": "def"}, {"fullname": "ida_scripts.struc.MemberT.instance_at_struct", "modulename": "ida_scripts.struc", "qualname": "MemberT.instance_at_struct", "type": "function", "doc": "<p>Get the value from a struct at the given address.</p>\n\n<p>Identical to <code>instance_at</code> but applies the offset of this member.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>struct_addr</strong> (<code>Pointer</code>):\nA pointer to an instance of the struct.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong><code>Pointer</code> or <code>int</code></strong>: The parsed value.</li>\n</ul>\n", "parameters": ["self", "struct_addr"], "funcdef": "def"}, {"fullname": "ida_scripts.struc.StrucT", "modulename": "ida_scripts.struc", "qualname": "StrucT", "type": "class", "doc": "<p>Represent a struct type.</p>\n"}, {"fullname": "ida_scripts.struc.StrucT.__init__", "modulename": "ida_scripts.struc", "qualname": "StrucT.__init__", "type": "function", "doc": "<p>Init with an <code>ida_struct.struc_t</code> object.</p>\n", "parameters": ["self", "struc"], "funcdef": "def"}, {"fullname": "ida_scripts.struc.StrucT.find_struc", "modulename": "ida_scripts.struc", "qualname": "StrucT.find_struc", "type": "function", "doc": "<p>Find struct type by name.</p>\n", "parameters": ["name"], "funcdef": "def"}, {"fullname": "ida_scripts.struc.StrucT.struc", "modulename": "ida_scripts.struc", "qualname": "StrucT.struc", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "ida_scripts.struc.StrucT.id", "modulename": "ida_scripts.struc", "qualname": "StrucT.id", "type": "variable", "doc": "<p>Struct id.</p>\n"}, {"fullname": "ida_scripts.struc.StrucT.name", "modulename": "ida_scripts.struc", "qualname": "StrucT.name", "type": "variable", "doc": "<p>Struct name.</p>\n"}, {"fullname": "ida_scripts.struc.StrucT.members", "modulename": "ida_scripts.struc", "qualname": "StrucT.members", "type": "variable", "doc": "<p>All member types of struct.</p>\n"}, {"fullname": "ida_scripts.struc.StrucT.size", "modulename": "ida_scripts.struc", "qualname": "StrucT.size", "type": "variable", "doc": "<p>Struct size in bytes.</p>\n"}, {"fullname": "ida_scripts.struc.StrucT.instance_at", "modulename": "ida_scripts.struc", "qualname": "StrucT.instance_at", "type": "function", "doc": "<p>Get an instance of this struct at the given address.</p>\n", "parameters": ["self", "addr"], "funcdef": "def"}, {"fullname": "ida_scripts.struc.StrucT.member_at_offset", "modulename": "ida_scripts.struc", "qualname": "StrucT.member_at_offset", "type": "function", "doc": "<p>Get a member type by offset.</p>\n", "parameters": ["self", "offset"], "funcdef": "def"}, {"fullname": "ida_scripts.struc.StrucT.member_starting_at_offset", "modulename": "ida_scripts.struc", "qualname": "StrucT.member_starting_at_offset", "type": "function", "doc": "<p>Get a member type by offset, member must start at offset.</p>\n", "parameters": ["self", "offset"], "funcdef": "def"}, {"fullname": "ida_scripts.struc.StrucT.create_struc", "modulename": "ida_scripts.struc", "qualname": "StrucT.create_struc", "type": "function", "doc": "<p>Create and return a new struct with a given name.</p>\n", "parameters": ["name"], "funcdef": "def"}, {"fullname": "ida_scripts.struc.StrucT.add_member", "modulename": "ida_scripts.struc", "qualname": "StrucT.add_member", "type": "function", "doc": "<p>Create and return a new member in this struct type.</p>\n", "parameters": ["self", "dtype", "offset", "size", "name"], "funcdef": "def"}, {"fullname": "ida_scripts.struc.StrucT.add_gap", "modulename": "ida_scripts.struc", "qualname": "StrucT.add_gap", "type": "function", "doc": "<p>Create and return a new member representing a bytes gap.</p>\n", "parameters": ["self", "offset", "size"], "funcdef": "def"}, {"fullname": "ida_scripts.struc.StrucT.delete_member", "modulename": "ida_scripts.struc", "qualname": "StrucT.delete_member", "type": "function", "doc": "<p>Delete a given member.</p>\n", "parameters": ["self", "member"], "funcdef": "def"}, {"fullname": "ida_scripts.struc.StrucT.add_member_auto", "modulename": "ida_scripts.struc", "qualname": "StrucT.add_member_auto", "type": "function", "doc": "<p>Create and return a new member in this struct type, automatically reworking gaps.</p>\n\n<p>A gap is recognised by:</p>\n\n<ol>\n<li>Is a single or array of 'char' or '_BYTE'.</li>\n<li>Name starting with 'gap' (all lowercase).</li>\n</ol>\n\n<p>If the requested offset falls within a gap of the above definition, the gap will automatically be adjusted to accomodate the new member.</p>\n", "parameters": ["self", "dtype", "offset", "size", "name"], "funcdef": "def"}, {"fullname": "ida_scripts.struc.StrucI", "modulename": "ida_scripts.struc", "qualname": "StrucI", "type": "class", "doc": "<p>Represent a struct instance.</p>\n"}, {"fullname": "ida_scripts.struc.StrucI.__init__", "modulename": "ida_scripts.struc", "qualname": "StrucI.__init__", "type": "function", "doc": "<p>Init with a base address and a struct type.</p>\n", "parameters": ["self", "addr", "struc_t"], "funcdef": "def"}, {"fullname": "ida_scripts.struc.StrucI.addr", "modulename": "ida_scripts.struc", "qualname": "StrucI.addr", "type": "variable", "doc": "<p>The address of this struct.</p>\n"}, {"fullname": "ida_scripts.struc.StrucI.struc_t", "modulename": "ida_scripts.struc", "qualname": "StrucI.struc_t", "type": "variable", "doc": "<p>The type definition of this struct.</p>\n"}, {"fullname": "ida_scripts.struc.StrucI.members", "modulename": "ida_scripts.struc", "qualname": "StrucI.members", "type": "variable", "doc": "<p>Collect all members of this struct as a dict.</p>\n"}, {"fullname": "ida_scripts.struc.StrucI.member", "modulename": "ida_scripts.struc", "qualname": "StrucI.member", "type": "function", "doc": "<p>Get a member's value or <code>Pointer</code> by its name.</p>\n", "parameters": ["self", "name", "return_pointer"], "funcdef": "def"}]